package ch.ethz.fgremper.rtca;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 * Connection to the MySQL database.
 * @author Fabian Gremper
 */
public class DatabaseConnection {

	private static final Logger log = LogManager.getLogger(DatabaseConnection.class);
	
	Connection con = null;

	public DatabaseConnection() throws Exception {
		// con = DatabaseConnectionPool.getInstance().getConnection();
    	ServerConfig serverConfig = ServerConfig.getInstance();
        Class.forName(serverConfig.dbDriverClass);
        con = DriverManager.getConnection(serverConfig.dbJdbcUrl, serverConfig.dbUser, serverConfig.dbPassword);
	}

	/* UTILITY */
	
	public void startTransaction() throws SQLException {
		con.setAutoCommit(false);
	}

	public void commitTransaction() throws SQLException {
		con.commit();
	}

	public void rollbackTransaction() throws SQLException {
		con.rollback();
	}
	
	public void closeConnection() throws SQLException {
		if (con != null) {
			con.close();
		}
	}

	/* UPDATE FROM CLIENT CYCLE */
	
	public void setEntireUserGitState(String inputJsonString, String username, String repositoryAlias) throws Exception {

		JSONObject setLocalGitStateObject = new JSONObject(inputJsonString);
		JSONArray fileArray = setLocalGitStateObject.getJSONArray("files");
		JSONArray commitHistory = setLocalGitStateObject.getJSONArray("commitHistory");
		JSONArray branchesArray = setLocalGitStateObject.getJSONArray("branches");
		
		// Start transaction
		startTransaction();
		
		// We're replacing all we know about what we know about this users git state, so delete every thing first
		deleteAllRepositoryUserInformation(repositoryAlias, username);

		// Read information in and store files to database and filesystem
		for (int i = 0; i < fileArray.length(); i++) {
			JSONObject fileObject = fileArray.getJSONObject(i);

			String filename = fileObject.getString("filename");
			String content = fileObject.getString("content");
			String sha = DigestUtils.sha1Hex(content).toString();
			String branch = fileObject.getString("branch");
			String commit = fileObject.getString("commit");
			String committed = fileObject.getString("committed");
			
			log.info("File: " + filename + " (sha: " + sha + ")");

			File file = new File(ServerConfig.getInstance().fileStorageDirectory + "/" + sha);
			if (!file.exists()) {
				FileUtils.writeStringToFile(file, content);
			}

			storeFile(repositoryAlias, username, filename, sha, branch, commit, committed);
		}

		// Read in commit history and store it to database
		for (int i = 0; i < commitHistory.length(); i++) {
			JSONObject commitObject = commitHistory.getJSONObject(i);

			String commit = commitObject.getString("commit");
			JSONArray downstreamCommits = commitObject.getJSONArray("downstreamCommits");
			
			storeCommitHistory(repositoryAlias, username, commit, downstreamCommits);
		}

		// Read in the branches and store it to database
		for (int i = 0; i < branchesArray.length(); i++) {
			JSONObject branchObject = branchesArray.getJSONObject(i);

			String branch = branchObject.getString("branch");
			String commit = branchObject.getString("commit");
			String active = (branchObject.getBoolean("active") ? "true" : "false");
			
			storeBranches(repositoryAlias, username, branch, commit, active);
		}

	}
	
	public void deleteAllRepositoryUserInformation(String repositoryAlias, String username) throws SQLException {
		PreparedStatement stmt;
		
		// Delete files
		stmt = con.prepareStatement("DELETE FROM files WHERE repositoryalias = ? AND username = ?");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.executeUpdate();

		// Delete commit history
		stmt = con.prepareStatement("DELETE FROM commithistory WHERE repositoryalias = ? AND username = ?");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.executeUpdate();

		// Delete branches for user
		stmt = con.prepareStatement("DELETE FROM branches WHERE repositoryalias = ? AND username = ?");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.executeUpdate();
	}

	public void storeFile(String repositoryAlias, String username, String filename, String sha, String branch, String commit, String committed) throws SQLException {
		// Store file information
		PreparedStatement stmt = con.prepareStatement("INSERT INTO files (repositoryalias, username, filename, sha, branch, commit, committed) VALUES (?, ?, ?, ?, ?, ?, ?)");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, filename);
		stmt.setString(4, sha);
		stmt.setString(5, branch);
		stmt.setString(6, commit);
		stmt.setString(7, committed);
		stmt.executeUpdate();
	}

	public void storeBranches(String repositoryAlias, String username, String branch, String commit, String active) throws Exception {
		PreparedStatement stmt = con.prepareStatement("INSERT INTO branches (repositoryalias, username, branch, commit, active, lastupdate) VALUES (?, ?, ?, ?, ?, NOW())");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, branch);
		stmt.setString(4, commit);
		stmt.setString(5, active);
		stmt.executeUpdate();
	}

	public void storeCommitHistory(String repositoryAlias, String username, String commit, JSONArray downstreamCommits) throws Exception {
		// Statement to insert a single commit/downstreamcommit pair
		PreparedStatement stmt = con.prepareStatement("INSERT INTO commithistory (repositoryalias, username, commit, downstreamcommit, distance) VALUES (?, ?, ?, ?, ?)");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, commit);
		
		// Store all commit/downstreamcommit pairs
		for (int i = 0; i < downstreamCommits.length(); i++) {
			JSONObject downstreamCommit = downstreamCommits.getJSONObject(i);
			stmt.setString(4, downstreamCommit.getString("commit"));
			stmt.setInt(5, downstreamCommit.getInt("distance"));
			stmt.executeUpdate();
		}
	}

	public void resetDatabase() throws SQLException {
		// Remove all columns from all tables
		PreparedStatement stmt;
		stmt = con.prepareStatement("DELETE FROM branches");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM usersessions");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM useraccess");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM files");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM commithistory");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM repositories");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM users");
		stmt.executeUpdate();
		// Add origin user
		stmt = con.prepareStatement("INSERT INTO users (username, passwordhash, isadmin, iscreator) VALUES ('origin', 'origin', 'false', 'false')");
		stmt.executeUpdate();
	}
	
	public JSONObject getBranchLevelAwareness(String repositoryAlias) throws Exception {
		JSONObject responseObject = new JSONObject();
		
		JSONArray branchesArray = new JSONArray();
		
		PreparedStatement stmt = con.prepareStatement(SqlQueryReader.getInstance().getQuery("BranchAwareness"));

		log.info("READ CONTENTS: " + SqlQueryReader.getInstance().getQuery("BranchAwareness"));
		
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, repositoryAlias);
		stmt.setString(3, repositoryAlias);
		stmt.setString(4, repositoryAlias);
		
		ResultSet rs = stmt.executeQuery();
		
		HashMap<String, JSONObject> index = new HashMap<String, JSONObject>();
		while (rs.next()) {
			String branch = rs.getString("branch");
			String username = rs.getString("username");
			String commit = rs.getString("commit");
			String active = rs.getString("active");
			int lastUpdateDiff = rs.getInt("lastupdatediff");
			String lastUpdateDiffString;
			if (lastUpdateDiff >= 60 * 60 * 24 * 7) lastUpdateDiffString = (lastUpdateDiff / (60 * 60 * 24 * 7)) + "w";
			else if (lastUpdateDiff >= 60 * 60 * 24) lastUpdateDiffString = (lastUpdateDiff / (60 * 60 * 24)) + "d";
			else if (lastUpdateDiff >= 60 * 60) lastUpdateDiffString = (lastUpdateDiff / (60 * 60)) + "h";
			else if (lastUpdateDiff >= 60) lastUpdateDiffString = (lastUpdateDiff / (60)) + "m";
			else lastUpdateDiffString = (lastUpdateDiff) + "s";
			String lastUpdate = rs.getString("lastupdate");
			String origincommit = rs.getString("origincommit");
			String relation;
			Integer distance = null;
			
			Integer d = null;
			
			if (commit == null) {
				relation = "NOT_CHECKED_OUT";
			}
			else if (origincommit == null) {
				relation = "LOCAL_BRANCH";
			}
			else if (commit.equals(origincommit)) {
				relation = "EQUAL";
			}
			else if ((d = branchCommitIsInHistoryOfBranchCommit(repositoryAlias, commit, origincommit)) != null) {
				relation = "BEHIND";
				distance = d;
			}
			else if ((d = branchCommitIsInHistoryOfBranchCommit(repositoryAlias, origincommit, commit)) != null) {
				relation = "AHEAD";
				distance = d;
			}
			else if ((d = distanceForCommitsToSeeEachOther(repositoryAlias, origincommit, commit)) != null) {
				relation = "FORK";
				distance = d;
			}
			else {
				relation = "UNKNOWN";
			}
			
			JSONObject branchObject;
			if (!index.containsKey(branch)) {
				branchObject = new JSONObject();
				branchesArray.put(branchObject);
				index.put(branch, branchObject);
				branchObject.put("branch", branch);
				branchObject.put("users", new JSONArray());
				branchObject.put("activeUsers", new JSONArray());
			}
			else {
				branchObject = index.get(branch);
			}
			
			JSONObject branchUserObject = new JSONObject();
			branchObject.getJSONArray("users").put(branchUserObject);
			branchUserObject.put("username", username);
			branchUserObject.put("relationWithOrigin", relation);
			if (distance != null) {
				branchUserObject.put("distanceFromOrigin", distance);
			}

			if (active.equals("true")) {
				JSONObject activeUserObject = new JSONObject();
				activeUserObject.put("username", username);
				activeUserObject.put("lastUpdate", lastUpdate);
				activeUserObject.put("lastUpdateDiff", lastUpdateDiffString);
				branchObject.getJSONArray("activeUsers").put(activeUserObject);
			}
			
		}
		
		responseObject.put("branches", branchesArray);
		
		return responseObject;
	}
	
	public Integer branchCommitIsInHistoryOfBranchCommit(String repositoryAlias, String commit1, String commit2) throws Exception {
		PreparedStatement stmt = con.prepareStatement("SELECT distance FROM commithistory WHERE commit = ? AND downstreamcommit = ? AND repositoryalias = ?");

		stmt.setString(1, commit2);
		stmt.setString(2, commit1);
		stmt.setString(3, repositoryAlias);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getInt("distance");
		}
		else {
			return null;
		}
	}
	

	public Integer distanceForCommitsToSeeEachOther(String repositoryAlias, String commit1, String commit2) throws Exception {
		PreparedStatement stmt = con.prepareStatement("SELECT MIN(b1.distance + b2.distance) AS mindistance FROM commithistory AS b1 CROSS JOIN commithistory AS b2 WHERE b1.commit = ? AND b2.commit = ? AND b1.downstreamcommit = b2.downstreamcommit AND b1.repositoryalias = ? AND b2.repositoryalias = ?");

		stmt.setString(1, commit2);
		stmt.setString(2, commit1);
		stmt.setString(3, repositoryAlias);
		stmt.setString(4, repositoryAlias);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getInt("mindistance");
		}
		else {
			return null;
		}
	}
	

	public String getFileSha(String repositoryAlias, String username, String branch, String filename, boolean showUncommitted) throws Exception {
		String showUncommittedString = showUncommitted ? "uncommitted" : "committed";
		
		PreparedStatement stmt = con.prepareStatement("SELECT sha FROM files WHERE repositoryalias = ? AND username = ? AND branch = ? AND filename = ? AND (committed = ? OR committed = 'both')");

		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, branch);
		stmt.setString(4, filename);
		stmt.setString(5, showUncommittedString);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getString("sha");
		}
		else {
			return null;
		}
	}

	public JSONObject getFileLevelAwareness(String repositoryAlias, String username, String branch, String additionalBranch, boolean showUncommitted, boolean showConflicts) throws Exception {
		
		/*String repositoryAlias = getConflictsObject.getString("repositoryAlias");
		String branch = getConflictsObject.getString("branch");
		boolean showUncommitted = getConflictsObject.getBoolean("showUncommitted");
		JSONArray selectedAdditionalBranches = getConflictsObject.getJSONArray("selectedAdditionalBranches");
		*/

		String showUncommittedString = showUncommitted ? "uncommitted" : "committed";
		
		
		/*
		JSONObject responseObject = new JSONObject();
		JSONArray branchesArray = new JSONArray();
		responseObject.put("branches", branchesArray);
		
		PreparedStatement stmt;
		
		JSONObject branchObject = new JSONObject();
		branchesArray.put(branchObject);
		branchObject.put("branch", branch);
		
		stmt = con.prepareStatement(SqlQueryReader.getInstance().getQuery("FileAwareness"));
		
		/* 
		1 my user
		2 committed
		3 branch
		4 repositoryalias
		5 repositoryalias
		6 repository alias
		7 their branch <-- not anymore
		8 committed
		9 their branch
		10 repository
		*/
		/*
		stmt.setString(1, username);
		stmt.setString(2, showUncommittedString);
		stmt.setString(3, branch);
		stmt.setString(4, repositoryAlias);
		stmt.setString(5, repositoryAlias);
		stmt.setString(6, repositoryAlias);
		stmt.setString(7, showUncommittedString);
		stmt.setString(8, branch);
		stmt.setString(9, repositoryAlias);
		
		ResultSet rs = stmt.executeQuery();
		HashMap<String, JSONObject> fileMap = new HashMap<String, JSONObject>();
		JSONArray conflictList = new JSONArray();
		while (rs.next()) {
			String filename = rs.getString("filename");
			String mySha = rs.getString("mysha");
			String theirUsername = rs.getString("theirusername");
			String theirSha = rs.getString("theirsha");
			
			JSONObject conflict;
			if (!fileMap.containsKey(filename)) {
				conflict = new JSONObject();
				fileMap.put(filename, conflict);
				conflictList.put(conflict);
				conflict.put("filename", filename);
				conflict.put("users", new JSONArray());
			}
			else {
				conflict = fileMap.get(filename);
			}
			
			JSONArray conflictUsers = conflict.getJSONArray("users");
			JSONObject user = new JSONObject();
			conflictUsers.put(user);
			
			user.put("username", theirUsername);
			
			String conflictType;
			if (mySha == null && theirSha != null) conflictType = "FILE_CONFLICT"; //new
			else if (mySha != null && theirSha == null) conflictType = "FILE_CONFLICT"; //delete
			else if (mySha == null && theirSha == null) conflictType = "EQUAL"; //inexistent
			else if (mySha.equals(theirSha)) conflictType = "EQUAL"; //equal
			else conflictType = "FILE_CONFLICT"; //conflict
			
			user.put("type", conflictType);
			
		}
		branchObject.put("files", conflictList);
		
		*/
		
			
			
			JSONObject branchObject = new JSONObject();
			branchObject.put("branch", additionalBranch);
			
			PreparedStatement stmt = con.prepareStatement(SqlQueryReader.getInstance().getQuery("FileAwareness"));
			
			/* 
			1 my user
			2 committed
			3 branch
			4 repositoryalias
			5 repositoryalias
			6 repository alias
			7 their branch <-- not anymore
			8 committed
			9 their branch
			10 repository
			*/

			stmt.setString(1, username);
			stmt.setString(2, showUncommittedString);
			stmt.setString(3, branch);
			stmt.setString(4, repositoryAlias);
			stmt.setString(5, repositoryAlias);
			stmt.setString(6, repositoryAlias);
			stmt.setString(7, showUncommittedString);
			stmt.setString(8, additionalBranch);
			stmt.setString(9, repositoryAlias);

			ResultSet rs = stmt.executeQuery();
			HashMap<String, JSONObject> fileMap = new HashMap<String, JSONObject>();
			JSONArray conflictList = new JSONArray();
			while (rs.next()) {
				String filename = rs.getString("filename");
				String mySha = rs.getString("mysha");
				String theirUsername = rs.getString("theirusername");
				String theirSha = rs.getString("theirsha");
				
				JSONObject conflict;
				if (!fileMap.containsKey(filename)) {
					conflict = new JSONObject();
					fileMap.put(filename, conflict);
					conflictList.put(conflict);
					conflict.put("filename", filename);
					conflict.put("users", new JSONArray());
				}
				else {
					conflict = fileMap.get(filename);
				}
				
				JSONArray conflictUsers = conflict.getJSONArray("users");
				JSONObject user = new JSONObject();
				conflictUsers.put(user);
				
				user.put("username", theirUsername);

				String conflictType;
				if (mySha == null && theirSha != null) conflictType = "FILE_CONFLICT"; //new
				else if (mySha != null && theirSha == null) conflictType = "FILE_CONFLICT"; //delete
				else if (mySha == null && theirSha == null) conflictType = "NO_CONFLICT"; //inexistent
				else if (mySha.equals(theirSha)) conflictType = "NO_CONFLICT"; //equal
				else conflictType = "FILE_CONFLICT"; //conflict
				
				user.put("type", conflictType);
				
			}
			branchObject.put("files", conflictList);
		
		return branchObject;
	}
	
	/* REPOSITORY MANAGEMENT */
	
	public String getRepositoryInformation(String repositoryAlias) throws Exception {
		// Get users from repository
		JSONArray repositoryUsers = new JSONArray();
		ResultSet rs;		
		PreparedStatement getRepositoryUsersStmt = con.prepareStatement(
			"SELECT DISTINCT username FROM useraccess WHERE repositoryalias = ?"
		);
		getRepositoryUsersStmt.setString(1, repositoryAlias);
		rs = getRepositoryUsersStmt.executeQuery();
		while (rs.next()) {
			repositoryUsers.put(rs.getString("username"));
		}

		// Get branches from repository
		JSONArray repositoryBranches = new JSONArray();
		PreparedStatement getRepositoryBranchesStmt = con.prepareStatement(
			"SELECT DISTINCT branch FROM files WHERE repositoryalias = ?"
		);
		getRepositoryBranchesStmt.setString(1, repositoryAlias);
		rs = getRepositoryBranchesStmt.executeQuery();
		while (rs.next()) {
			repositoryBranches.put(rs.getString("branch"));
		}
		JSONObject responseObject = new JSONObject();
		
		// Add to and return object
		responseObject.put("repositoryUsers", repositoryUsers);
		responseObject.put("repositoryBranches", repositoryBranches);
		return responseObject.toString();
	}

	public JSONArray getAllRepositories() throws Exception {
		// Statement to get all the repositories
		PreparedStatement stmt = con.prepareStatement("SELECT DISTINCT repositoryalias, repositoryurl FROM repositories");
		
		// Put the results into a JSON array
		JSONArray repositoriesArray = new JSONArray();
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			String repositoryAlias = rs.getString("repositoryalias");
			String repositoryUrl = rs.getString("repositoryurl");
			JSONObject repositoryObject = new JSONObject();
			repositoryObject.put("repositoryAlias", repositoryAlias);
			repositoryObject.put("repositoryUrl", repositoryUrl);
			repositoryObject.put("users", new JSONArray());
			repositoriesArray.put(repositoryObject);
		}
		
		return repositoriesArray;
	}
	
	public JSONArray getRepositories(String myUsername) throws Exception {
		// Statement to get all the repositories and users for your user permissions
		
		PreparedStatement stmt = con.prepareStatement("SELECT DISTINCT repositories.repositoryalias, repositories.repositoryurl, repositories.repositoryowner, repositories.repositorydescription, useraccess.username FROM repositories LEFT OUTER JOIN useraccess ON repositories.repositoryalias = useraccess.repositoryalias WHERE EXISTS (SELECT users.username FROM users WHERE users.username = ? AND users.isadmin = 'true') OR EXISTS (SELECT useraccess.username FROM useraccess WHERE useraccess.username = ? AND useraccess.repositoryalias = repositories.repositoryalias) OR repositories.repositoryowner = ? ORDER BY repositories.repositoryalias");
		stmt.setString(1, myUsername);
		stmt.setString(2, myUsername);
		stmt.setString(3, myUsername);
		
		// Put the results into a JSON array
		JSONArray repositoriesArray = new JSONArray();
		ResultSet rs = stmt.executeQuery();
		HashMap<String, JSONObject> index = new HashMap<String, JSONObject>();
		while (rs.next()) {
			String repositoryAlias = rs.getString("repositoryalias");
			String repositoryUrl = rs.getString("repositoryurl");
			String repositoryOwner = rs.getString("repositoryowner");
			String repositoryDescription = rs.getString("repositorydescription");
			String username = rs.getString("username");
			if (!index.containsKey(repositoryAlias)) {
				JSONObject repositoryObject = new JSONObject();
				index.put(repositoryAlias, repositoryObject);
				repositoryObject.put("repositoryAlias", repositoryAlias);
				repositoryObject.put("repositoryUrl", repositoryUrl);
				repositoryObject.put("repositoryOwner", repositoryOwner);
				repositoryObject.put("repositoryDescription", repositoryDescription);
				repositoryObject.put("users", new JSONArray());
				repositoriesArray.put(repositoryObject);
			}
			if (username != null) {
				index.get(repositoryAlias).getJSONArray("users").put(username);
			}
		}
		
		return repositoriesArray;
	}
	
	public void createRepository(String repositoryAlias, String repositoryUrl, String repositoryOwner, String repositoryDescription) throws SQLException {
		// Add repository
		PreparedStatement stmt = con.prepareStatement("INSERT INTO repositories (repositoryalias, repositoryurl, repositoryowner, repositorydescription, clonecount) VALUES (?, ?, ?, ?, 0)");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, repositoryUrl);
		stmt.setString(3, repositoryOwner);
		stmt.setString(4, repositoryDescription);
		stmt.executeUpdate();
	}
	
	public void deleteRepository(String repositoryAlias) throws SQLException {		
		// Delete repository
		PreparedStatement stmt = con.prepareStatement("DELETE FROM repositories WHERE repositoryalias = ?");
		stmt.setString(1, repositoryAlias);
		stmt.executeUpdate();
	}
	
	/* USER MANAGEMENT */

	public JSONArray getUsers() throws Exception {
		JSONArray usersArray = new JSONArray();
		
		PreparedStatement stmt = con.prepareStatement("SELECT username, isadmin, iscreator FROM users");
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			String username = rs.getString("username");
			String isAdmin = rs.getString("isadmin");
			String isCreator = rs.getString("iscreator");
			JSONObject userObject = new JSONObject();
			userObject.put("username", username);
			userObject.put("isAdmin", isAdmin.equals("true"));
			userObject.put("isCreator", isCreator.equals("true"));
			usersArray.put(userObject);
		}
		
		return usersArray;
	}
	
	public void addUser(String username, String password) throws SQLException {
		// Hash the password
		String passwordHash = DigestUtils.sha1Hex(ServerConfig.getInstance().passwordSalt + password).toString();

		PreparedStatement stmt = con.prepareStatement("INSERT INTO users (username, passwordhash, isadmin, iscreator) VALUES (?, ?, 'false', 'false')");
		stmt.setString(1, username);
		stmt.setString(2, passwordHash);
		stmt.executeUpdate();
	}
	
	public void deleteUser(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("DELETE FROM users WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}

	public void makeUserAdmin(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE users SET isadmin = 'true' WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}

	public void revokeUserAdmin(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE users SET isadmin = 'false' WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}

	public void makeUserCreator(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE users SET iscreator = 'true' WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}

	public void revokeUserCreator(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE users SET iscreator = 'false' WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}
	
	public void modifyRepositoryOwner(String repositoryAlias, String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE repositories SET repositoryowner = ? WHERE repositoryalias = ?");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		stmt.executeUpdate();
	}

	public void addUserToRepository(String username, String repositoryAlias) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("INSERT INTO useraccess (username, repositoryalias) VALUES (?, ?)");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		stmt.executeUpdate();
	}

	public void deleteUserFromRepository(String username, String repositoryAlias) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("DELETE FROM useraccess WHERE username = ? AND repositoryalias = ?");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		stmt.executeUpdate();
	}
		
	public String getNewSessionIdForCorrectLogin(String username, String password) throws SQLException {
		String passwordHash = DigestUtils.sha1Hex(ServerConfig.getInstance().passwordSalt + password).toString();

		PreparedStatement stmt = con.prepareStatement("SELECT username FROM users WHERE username = ? AND passwordhash = ?");		
		stmt.setString(1, username);
		stmt.setString(2, passwordHash);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			// User/pass correct -> create a new session
			return getRandomHexString(32);
		}
		else {
			// User/pass doesn't exist
			return null;
		}
	}
	
	public void persistSessionIdForUser(String sessionId, String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("INSERT INTO usersessions (sessionid, username, expires) VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))");
		stmt.setString(1, sessionId);
		stmt.setString(2, username);
		stmt.executeUpdate();
	}
	
	/* AUTHORIZATION CHECKS */
	
	public boolean doesUserHaveRepositoryAccess(String username, String repositoryAlias) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("SELECT username FROM useraccess WHERE username = ? AND repositoryalias = ?");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		ResultSet rs = stmt.executeQuery();
		return rs.next();
	}

	public boolean isUserAdmin(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("SELECT username FROM users WHERE username = ? and isadmin = 'true'");
		stmt.setString(1, username);
		ResultSet rs = stmt.executeQuery();
		return rs.next();
	}

	public boolean isUserCreator(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("SELECT username FROM users WHERE username = ? and iscreator = 'true'");
		stmt.setString(1, username);
		ResultSet rs = stmt.executeQuery();
		return rs.next();
	}

	public boolean isUserRepositoryOwner(String username, String repositoryAlias) throws SQLException {
		if (username == null) return false;
		PreparedStatement stmt = con.prepareStatement("SELECT repositoryowner FROM repositories WHERE repositoryowner = ? AND repositoryalias = ?");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		ResultSet rs = stmt.executeQuery();
		return rs.next();
	}

	public String getUsername(String sessionId) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("SELECT username FROM usersessions WHERE sessionid = ? AND NOW <= expires");
		stmt.setString(1, sessionId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getString("username");
		}
		else {
			return null;
		}
	}

	public int getRepositoryCloneCount(String repositoryAlias) throws Exception {
		PreparedStatement stmt = con.prepareStatement("SELECT clonecount FROM repositories WHERE repositoryalias = ?");
		stmt.setString(1, repositoryAlias);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getInt("clonecount");
		}
		else {
			throw new Exception("No Clone Count found");
		}
	}

	public void incRepositoryCloneCount(String repositoryAlias) throws Exception {
		PreparedStatement stmt = con.prepareStatement("UPDATE repositories SET clonecount = clonecount + 1 WHERE repositoryalias = ?");
		stmt.setString(1, repositoryAlias);
		stmt.executeUpdate();
	}
	
	public String getMergeBaseCommitId(String repositoryAlias, String commit1, String commit2) throws SQLException {

		PreparedStatement stmt = con.prepareStatement("SELECT b1.downstreamcommit, (b1.distance + b2.distance) AS totaldistance FROM commithistory AS b1 CROSS JOIN commithistory AS b2 WHERE b1.commit = ? AND b2.commit = ? AND b1.downstreamcommit = b2.downstreamcommit AND b1.repositoryalias = ? AND b2.repositoryalias = ? ORDER BY totaldistance ASC");

		stmt.setString(1, commit2);
		stmt.setString(2, commit1);
		stmt.setString(3, repositoryAlias);
		stmt.setString(4, repositoryAlias);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getString("downstreamcommit");
		}
		else {
			return null;
		}
		
	}
	
	public String getCommitForBranchAndFile(String repositoryAlias, String username, String branch, String filename) throws SQLException {

		PreparedStatement stmt = con.prepareStatement("SELECT commit FROM files WHERE repositoryalias = ? AND username = ? AND branch = ? AND filename = ? AND (committed = 'committed' OR committed = 'both')");

		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, branch);
		stmt.setString(4, filename);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getString("commit");
		}
		else {
			return null;
		}
	}
	
	/* THE RANDOM STRING FUNCTION FOR SESSION IDS */
	
	private String getRandomHexString(int numchars){
        Random r = new Random();
        StringBuffer sb = new StringBuffer();
        while(sb.length() < numchars){
            sb.append(Integer.toHexString(r.nextInt()));
        }

        return sb.toString().substring(0, numchars);
    }
	
}
