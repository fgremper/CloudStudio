package ch.ethz.fgremper.rtca;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 * 
 * Connection to the MySQL database.
 * 
 * @author Fabian Gremper
 * 
 */
public class DatabaseConnection {

	private static final Logger log = LogManager.getLogger(DatabaseConnection.class);
	
	Connection con = null;

	/**
	 * 
	 * Get a connection from the database pool.
	 * 
	 */
	public void getConnection() throws Exception {
        con = DatabaseConnectionPool.getInstance().getConnection();
	}
	
	/**
	 * 
	 * Start a transaction.
	 *
	 */
	public void startTransaction() throws SQLException {
		con.setAutoCommit(false);
	}

	/**
	 * 
	 * Commit a transaction.
	 * 
	 */
	public void commitTransaction() throws SQLException {
		con.commit();
	}

	/**
	 * 
	 * Rollback a transaction.
	 *
	 */
	public void rollbackTransaction() throws SQLException {
		con.rollback();
	}
	
	/**
	 * 
	 * Close connection if it's open
	 * 
	 */
	public void closeConnection() {
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
			// Do nothing
		}
	}

	/**
	 * 
	 * Reset and refresh the user state for a repository and user directly from the JSON data.
	 * 
	 * @param inputJsonString
	 * @param username
	 * @param repositoryAlias
	 *
	 */
	public void setEntireUserGitState(String inputJsonString, String username, String repositoryAlias) throws Exception {

		JSONObject setLocalGitStateObject = new JSONObject(inputJsonString);
		JSONArray fileArray = setLocalGitStateObject.getJSONArray("files");
		JSONArray commitHistory = setLocalGitStateObject.getJSONArray("commitHistory");
		JSONArray branchesArray = setLocalGitStateObject.getJSONArray("branches");
		
		// Start transaction
		startTransaction();
		
		// We're replacing all we know about what we know about this users git state, so delete every thing first
		deleteAllRepositoryUserInformation(repositoryAlias, username);

		// Read file information in and store files to database and filesystem
		for (int i = 0; i < fileArray.length(); i++) {
			JSONObject fileObject = fileArray.getJSONObject(i);

			String filename = fileObject.getString("filename");
			String content = fileObject.getString("content");
			String sha = DigestUtils.sha1Hex(content).toString();
			String branch = fileObject.getString("branch");
			String commit = fileObject.getString("commit");
			String committed = fileObject.getString("committed");
			
			log.info("File: " + filename + " (sha: " + sha + ")");

			// Only write file contents if they don't exist yet
			File file = new File(ServerConfig.getInstance().fileStorageDirectory + File.separator + sha);
			if (!file.exists()) {
				FileUtils.writeStringToFile(file, content);
			}

			// Store the file in the database
			storeFile(repositoryAlias, username, filename, sha, branch, commit, committed);
			
		}

		// Read in commit history and store it to database
		for (int i = 0; i < commitHistory.length(); i++) {
			JSONObject commitObject = commitHistory.getJSONObject(i);

			String commit = commitObject.getString("commit");
			JSONArray downstreamCommits = commitObject.getJSONArray("downstreamCommits");
			
			storeCommitHistory(repositoryAlias, username, commit, downstreamCommits);
		}

		// Read in the branches and store it to database
		for (int i = 0; i < branchesArray.length(); i++) {
			JSONObject branchObject = branchesArray.getJSONObject(i);

			String branch = branchObject.getString("branch");
			String commit = branchObject.getString("commit");
			String active = (branchObject.getBoolean("active") ? "true" : "false");
			
			storeBranches(repositoryAlias, username, branch, commit, active);
		}

	}
	
	/**
	 * 
	 * Delete all data for a user and repository.
	 * 
	 * @param repositoryAlias
	 * @param username
	 * 
	 */
	public void deleteAllRepositoryUserInformation(String repositoryAlias, String username) throws SQLException {
		PreparedStatement stmt;
		
		// Delete files
		stmt = con.prepareStatement("DELETE FROM files WHERE repositoryalias = ? AND username = ?");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.executeUpdate();

		// Delete commit history
		stmt = con.prepareStatement("DELETE FROM commithistory WHERE repositoryalias = ? AND username = ?");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.executeUpdate();

		// Delete branches for user
		stmt = con.prepareStatement("DELETE FROM branches WHERE repositoryalias = ? AND username = ?");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Add a user file to the database.
	 * 
	 * @param repositoryAlias
	 * @param username
	 * @param filename
	 * @param sha
	 * @param branch
	 * @param commit
	 * @param committed
	 * 
	 */
	public void storeFile(String repositoryAlias, String username, String filename, String sha, String branch, String commit, String committed) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("INSERT INTO files (repositoryalias, username, filename, sha, branch, commit, committed) VALUES (?, ?, ?, ?, ?, ?, ?)");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, filename);
		stmt.setString(4, sha);
		stmt.setString(5, branch);
		stmt.setString(6, commit);
		stmt.setString(7, committed);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Add a branch for a user to the database.
	 * 
	 * @param repositoryAlias
	 * @param username
	 * @param branch
	 * @param commit
	 * @param active
	 * 
	 */
	public void storeBranches(String repositoryAlias, String username, String branch, String commit, String active) throws Exception {
		PreparedStatement stmt = con.prepareStatement("INSERT INTO branches (repositoryalias, username, branch, commit, active, lastupdate) VALUES (?, ?, ?, ?, ?, NOW())");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, branch);
		stmt.setString(4, commit);
		stmt.setString(5, active);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Add downstream commits and distances for a certain commit and user.
	 * 
	 * @param repositoryAlias
	 * @param username
	 * @param commit
	 * @param downstreamCommits
	 * 
	 */
	public void storeCommitHistory(String repositoryAlias, String username, String commit, JSONArray downstreamCommits) throws Exception {
		
		// Statement to insert a single commit/downstreamcommit pair
		PreparedStatement stmt = con.prepareStatement("INSERT INTO commithistory (repositoryalias, username, commit, downstreamcommit, distance) VALUES (?, ?, ?, ?, ?)");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, commit);
		
		// Store all commit/downstreamcommit pairs
		for (int i = 0; i < downstreamCommits.length(); i++) {
			JSONObject downstreamCommit = downstreamCommits.getJSONObject(i);
			stmt.setString(4, downstreamCommit.getString("commit"));
			stmt.setInt(5, downstreamCommit.getInt("distance"));
			stmt.executeUpdate();
		}
		
	}
	
	/**
	 * 
	 * Remove all table contents from the database.
	 * This is used for testing.
	 * 
	 */
	public void resetDatabase() throws SQLException {
		// Remove all columns from all tables
		PreparedStatement stmt;
		stmt = con.prepareStatement("DELETE FROM branches");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM usersessions");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM useraccess");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM files");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM commithistory");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM repositories");
		stmt.executeUpdate();
		stmt = con.prepareStatement("DELETE FROM users");
		stmt.executeUpdate();
		
		// Add origin user
		stmt = con.prepareStatement("INSERT INTO users (username, passwordhash, isadmin, iscreator) VALUES ('origin', 'origin', 'false', 'false')");
		stmt.executeUpdate();
	}
	
	/**
	 * 
	 * Retrieve branch level awareness JSON object for a repository.
	 * 
	 * @param repositoryAlias
	 * 
	 */
	public JSONObject getBranchLevelAwareness(String repositoryAlias) throws Exception {
		
		JSONObject responseObject = new JSONObject();
		
		JSONArray branchesArray = new JSONArray();
		
		PreparedStatement stmt = con.prepareStatement(SqlQueryReader.getInstance().getQuery("BranchAwareness"));

		stmt.setString(1, repositoryAlias);
		stmt.setString(2, repositoryAlias);
		stmt.setString(3, repositoryAlias);
		stmt.setString(4, repositoryAlias);
		
		ResultSet rs = stmt.executeQuery();
		
		// Map branch names to branch objects if we created them already
		HashMap<String, JSONObject> index = new HashMap<String, JSONObject>();
		
		// Loop through all the branch/user pairs
		while (rs.next()) {
			String branch = rs.getString("branch");
			String username = rs.getString("username");
			String commit = rs.getString("commit");
			String active = rs.getString("active");
			int lastUpdateDiff = rs.getInt("lastupdatediff");
			String lastUpdateDiffString;
			if (lastUpdateDiff >= 60 * 60 * 24 * 7) lastUpdateDiffString = (lastUpdateDiff / (60 * 60 * 24 * 7)) + "w";
			else if (lastUpdateDiff >= 60 * 60 * 24) lastUpdateDiffString = (lastUpdateDiff / (60 * 60 * 24)) + "d";
			else if (lastUpdateDiff >= 60 * 60) lastUpdateDiffString = (lastUpdateDiff / (60 * 60)) + "h";
			else if (lastUpdateDiff >= 60) lastUpdateDiffString = (lastUpdateDiff / (60)) + "m";
			else lastUpdateDiffString = (lastUpdateDiff) + "s";
			String lastUpdate = rs.getString("lastupdate");
			String origincommit = rs.getString("origincommit");
			String relation;
			Integer distance = null;
			
			Integer d = null;
			
			// What is the relationship between the origin and the user for a certain branch
			if (commit == null) {
				relation = "NOT_CHECKED_OUT";
			}
			else if (origincommit == null) {
				relation = "LOCAL_BRANCH";
			}
			else if (commit.equals(origincommit)) {
				relation = "EQUAL";
			}
			else if ((d = branchCommitIsInHistoryOfBranchCommit(repositoryAlias, commit, origincommit)) != null) {
				relation = "BEHIND";
				distance = d;
			}
			else if ((d = branchCommitIsInHistoryOfBranchCommit(repositoryAlias, origincommit, commit)) != null) {
				relation = "AHEAD";
				distance = d;
			}
			else if ((d = distanceForCommitsToSeeEachOther(repositoryAlias, origincommit, commit)) != null) {
				relation = "FORK";
				distance = d;
			}
			else {
				relation = "UNKNOWN";
			}
			
			JSONObject branchObject;
			
			if (!index.containsKey(branch)) {
				// We don't have the branch object yet
				branchObject = new JSONObject();
				branchesArray.put(branchObject);
				index.put(branch, branchObject);
				branchObject.put("branch", branch);
				branchObject.put("users", new JSONArray());
				branchObject.put("activeUsers", new JSONArray());
			}
			else {
				// We already have the branch object
				branchObject = index.get(branch);
			}
			
			// Add the user and information to the branch object
			JSONObject branchUserObject = new JSONObject();
			branchObject.getJSONArray("users").put(branchUserObject);
			branchUserObject.put("username", username);
			branchUserObject.put("relationWithOrigin", relation);
			if (distance != null) {
				branchUserObject.put("distanceFromOrigin", distance);
			}

			// Is this the active branch of a user?
			// Also store the last update information in here
			if (active != null && active.equals("true")) {
				JSONObject activeUserObject = new JSONObject();
				activeUserObject.put("username", username);
				activeUserObject.put("lastUpdate", lastUpdate);
				activeUserObject.put("lastUpdateDiff", lastUpdateDiffString);
				branchObject.getJSONArray("activeUsers").put(activeUserObject);
			}
			
		}
		
		responseObject.put("branches", branchesArray);
		
		return responseObject;
		
	}
	
	/**
	 * 
	 * Returns the distance from a commit to another if it is directly downstream of it.
	 * If it is not, return null.
	 * 
	 * @param repositoryAlias
	 * @param commit1
	 * @param commit2
	 * 
	 */
	public Integer branchCommitIsInHistoryOfBranchCommit(String repositoryAlias, String commit1, String commit2) throws Exception {
		PreparedStatement stmt = con.prepareStatement("SELECT distance FROM commithistory WHERE commit = ? AND downstreamcommit = ? AND repositoryalias = ?");

		stmt.setString(1, commit2);
		stmt.setString(2, commit1);
		stmt.setString(3, repositoryAlias);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getInt("distance");
		}
		else {
			return null;
		}
	}
	
	/**
	 * 
	 * Minimum distance to travel from a commit to another in the commit graph.
	 * 
	 * @param repositoryAlias
	 * @param commit1
	 * @param commit2
	 * 
	 */
	public Integer distanceForCommitsToSeeEachOther(String repositoryAlias, String commit1, String commit2) throws Exception {
		PreparedStatement stmt = con.prepareStatement("SELECT MIN(b1.distance + b2.distance) AS mindistance FROM commithistory AS b1 CROSS JOIN commithistory AS b2 WHERE b1.commit = ? AND b2.commit = ? AND b1.downstreamcommit = b2.downstreamcommit AND b1.repositoryalias = ? AND b2.repositoryalias = ?");

		stmt.setString(1, commit2);
		stmt.setString(2, commit1);
		stmt.setString(3, repositoryAlias);
		stmt.setString(4, repositoryAlias);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getInt("mindistance");
		}
		else {
			return null;
		}
	}
	
	/**
	 * 
	 * Retrieve the SHA of a file.
	 * 
	 * @param repositoryAlias
	 * @param username
	 * @param branch
	 * @param filename
	 * @param showUncommitted
	 * 
	 */
	public String getFileSha(String repositoryAlias, String username, String branch, String filename, boolean showUncommitted) throws Exception {
		String showUncommittedString = showUncommitted ? "uncommitted" : "committed";
		
		PreparedStatement stmt = con.prepareStatement("SELECT sha FROM files WHERE repositoryalias = ? AND username = ? AND branch = ? AND filename = ? AND (committed = ? OR committed = 'both')");

		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, branch);
		stmt.setString(4, filename);
		stmt.setString(5, showUncommittedString);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getString("sha");
		}
		else {
			return null;
		}
	}

	/**
	 * 
	 * Get file level awareness response object.
	 * 
	 * @param repositoryAlias
	 * @param username
	 * @param branch
	 * @param compareToBranch
	 * @param showUncommitted
	 * @param showConflicts
	 * 
	 */
	public JSONObject getFileLevelAwareness(String repositoryAlias, String username, String branch, String compareToBranch, boolean showUncommitted, boolean showConflicts) throws Exception {
		
		String showUncommittedString = showUncommitted ? "uncommitted" : "committed";
			
		JSONObject responseObject = new JSONObject();
		
		PreparedStatement stmt = con.prepareStatement(SqlQueryReader.getInstance().getQuery("FileAwareness"));

		stmt.setString(1, username);
		stmt.setString(2, showUncommittedString);
		stmt.setString(3, branch);
		stmt.setString(4, repositoryAlias);
		stmt.setString(5, repositoryAlias);
		stmt.setString(6, repositoryAlias);
		stmt.setString(7, showUncommittedString);
		stmt.setString(8, compareToBranch);
		stmt.setString(9, repositoryAlias);

		HashMap<String, JSONObject> fileMap = new HashMap<String, JSONObject>();
		JSONArray fileList = new JSONArray();
		
		// Pairs of my file version with file version of other user (for all users)
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			
			// Read fields
			String filename = rs.getString("filename");
			String mySha = rs.getString("mysha");
			String theirUsername = rs.getString("theirusername");
			String theirSha = rs.getString("theirsha");
			
			JSONObject file;
			if (!fileMap.containsKey(filename)) {
				// We don't have the file in the list yet
				file = new JSONObject();
				fileMap.put(filename, file);
				fileList.put(file);
				file.put("filename", filename);
				file.put("users", new JSONArray());
			}
			else {
				// We already have the file in the list
				file = fileMap.get(filename);
			}
			
			// Fill information about the user we compare the file to
			JSONArray users = file.getJSONArray("users");
			JSONObject user = new JSONObject();
			users.put(user);
			
			// Username
			user.put("username", theirUsername);

			// Conflict type
			String conflictType;
			if (mySha == null && theirSha != null) conflictType = "FILE_CONFLICT"; //new
			else if (mySha != null && theirSha == null) conflictType = "FILE_CONFLICT"; //delete
			else if (mySha == null && theirSha == null) conflictType = "NO_CONFLICT"; //inexistent
			else if (mySha.equals(theirSha)) conflictType = "NO_CONFLICT"; //equal
			else conflictType = "FILE_CONFLICT"; //conflict
			
			user.put("type", conflictType);
			
		}
		responseObject.put("files", fileList);
		
		return responseObject;
	}
	
	/**
	 * 
	 * Retrieve repository information.
	 * This is used for the filters in the interface.
	 * 
	 * @param repositoryAlias
	 * 
	 */
	public String getRepositoryInformation(String repositoryAlias) throws Exception {

		ResultSet rs;
		
		// Get users from repository
		JSONArray repositoryUsers = new JSONArray();
		PreparedStatement getRepositoryUsersStmt = con.prepareStatement("SELECT DISTINCT username FROM useraccess WHERE repositoryalias = ?");
		getRepositoryUsersStmt.setString(1, repositoryAlias);
		rs = getRepositoryUsersStmt.executeQuery();
		while (rs.next()) {
			repositoryUsers.put(rs.getString("username"));
		}

		// Get branches from repository
		JSONArray repositoryBranches = new JSONArray();
		PreparedStatement getRepositoryBranchesStmt = con.prepareStatement("SELECT DISTINCT branch FROM files WHERE repositoryalias = ?");
		getRepositoryBranchesStmt.setString(1, repositoryAlias);
		rs = getRepositoryBranchesStmt.executeQuery();
		while (rs.next()) {
			repositoryBranches.put(rs.getString("branch"));
		}

		// Get branches from repository
		String lastOriginUpdate = "unknown";
		int lastOriginUpdateDiff;
		String lastOriginUpdateDiffString = "unknown";
		
		PreparedStatement getLastOriginUpdateStmt = con.prepareStatement("SELECT time_to_sec(timediff(now(), lastupdate)) AS lastupdatediff, lastupdate FROM branches WHERE repositoryalias = ? and username = 'origin'");
		getLastOriginUpdateStmt.setString(1, repositoryAlias);
		rs = getLastOriginUpdateStmt.executeQuery();
		if (rs.next()) {
			lastOriginUpdate = rs.getString("lastupdate");
			lastOriginUpdateDiff = rs.getInt("lastupdatediff");
			if (lastOriginUpdateDiff >= 60 * 60 * 24 * 7) lastOriginUpdateDiffString = (lastOriginUpdateDiff / (60 * 60 * 24 * 7)) + "w";
			else if (lastOriginUpdateDiff >= 60 * 60 * 24) lastOriginUpdateDiffString = (lastOriginUpdateDiff / (60 * 60 * 24)) + "d";
			else if (lastOriginUpdateDiff >= 60 * 60) lastOriginUpdateDiffString = (lastOriginUpdateDiff / (60 * 60)) + "h";
			else if (lastOriginUpdateDiff >= 60) lastOriginUpdateDiffString = (lastOriginUpdateDiff / (60)) + "m";
			else lastOriginUpdateDiffString = (lastOriginUpdateDiff) + "s";
		}
		
		// Response object
		JSONObject responseObject = new JSONObject();
		responseObject.put("repositoryUsers", repositoryUsers);
		responseObject.put("repositoryBranches", repositoryBranches);
		responseObject.put("lastOriginUpdate", lastOriginUpdate);
		responseObject.put("lastOriginUpdateDiff", lastOriginUpdateDiffString);
		return responseObject.toString();
		
	}

	/**
	 * 
	 * Get all repositories.
	 * Used by the origin updater.
	 * 
	 */
	public JSONArray getAllRepositories() throws Exception {
		
		// Statement to get all the repositories
		PreparedStatement stmt = con.prepareStatement("SELECT DISTINCT repositoryalias, repositoryurl FROM repositories");
		
		// Put the results into a JSON array
		JSONArray repositoriesArray = new JSONArray();
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			String repositoryAlias = rs.getString("repositoryalias");
			String repositoryUrl = rs.getString("repositoryurl");
			JSONObject repositoryObject = new JSONObject();
			repositoryObject.put("repositoryAlias", repositoryAlias);
			repositoryObject.put("repositoryUrl", repositoryUrl);
			repositoryObject.put("users", new JSONArray());
			repositoriesArray.put(repositoryObject);
		}
		
		return repositoriesArray;
		
	}
	
	/**
	 * 
	 * Retrieve all repositories and information a certain user has access to.
	 * 
	 * @param myUsername
	 * 
	 */
	public JSONArray getRepositories(String myUsername) throws Exception {
		
		// Statement to get all the repositories and users for your user permissions
		PreparedStatement stmt = con.prepareStatement("SELECT DISTINCT repositories.repositoryalias, repositories.repositoryurl, repositories.repositoryowner, repositories.repositorydescription, useraccess.username FROM repositories LEFT OUTER JOIN useraccess ON repositories.repositoryalias = useraccess.repositoryalias WHERE EXISTS (SELECT users.username FROM users WHERE users.username = ? AND users.isadmin = 'true') OR EXISTS (SELECT useraccess.username FROM useraccess WHERE useraccess.username = ? AND useraccess.repositoryalias = repositories.repositoryalias) OR repositories.repositoryowner = ? ORDER BY repositories.repositoryalias");
		stmt.setString(1, myUsername);
		stmt.setString(2, myUsername);
		stmt.setString(3, myUsername);
		

		JSONArray repositoriesArray = new JSONArray();
		HashMap<String, JSONObject> index = new HashMap<String, JSONObject>();
		
		// Loop through all the repository/user pairs
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			
			// Read fields
			String repositoryAlias = rs.getString("repositoryalias");
			String repositoryUrl = rs.getString("repositoryurl");
			String repositoryOwner = rs.getString("repositoryowner");
			String repositoryDescription = rs.getString("repositorydescription");
			String username = rs.getString("username");
			
			if (!index.containsKey(repositoryAlias)) {
				// We don't have the repository yet
				JSONObject repositoryObject = new JSONObject();
				index.put(repositoryAlias, repositoryObject);
				repositoryObject.put("repositoryAlias", repositoryAlias);
				repositoryObject.put("repositoryUrl", repositoryUrl);
				repositoryObject.put("repositoryOwner", repositoryOwner);
				repositoryObject.put("repositoryDescription", repositoryDescription);
				repositoryObject.put("users", new JSONArray());
				repositoriesArray.put(repositoryObject);
			}

			// Add the user to the repository
			index.get(repositoryAlias).getJSONArray("users").put(username);

		}
		
		return repositoriesArray;
		
	}
	
	/**
	 * 
	 * Create a new repository.
	 * 
	 * @param repositoryAlias
	 * @param repositoryUrl
	 * @param repositoryOwner
	 * @param repositoryDescription
	 * 
	 */
	public void createRepository(String repositoryAlias, String repositoryUrl, String repositoryOwner, String repositoryDescription) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("INSERT INTO repositories (repositoryalias, repositoryurl, repositoryowner, repositorydescription, clonecount) VALUES (?, ?, ?, ?, 0)");
		stmt.setString(1, repositoryAlias);
		stmt.setString(2, repositoryUrl);
		stmt.setString(3, repositoryOwner);
		stmt.setString(4, repositoryDescription);
		stmt.executeUpdate();
	}
	
	/**
	 * 
	 * Delete a repository.
	 * 
	 * @param repositoryAlias
	 * 
	 */
	public void deleteRepository(String repositoryAlias) throws SQLException {		
		// Delete repository
		PreparedStatement stmt = con.prepareStatement("DELETE FROM repositories WHERE repositoryalias = ?");
		stmt.setString(1, repositoryAlias);
		stmt.executeUpdate();
	}
	
	/**
	 * 
	 * Get information for all the users.
	 * 
	 * @return List of users and information
	 * 
	 */
	public JSONObject getUsers() throws Exception {
		
		JSONObject responseObject = new JSONObject();
		
		JSONArray usersArray = new JSONArray();
		responseObject.put("users", usersArray);
		
		PreparedStatement stmt = con.prepareStatement("SELECT username, isadmin, iscreator, joindate FROM users");
		ResultSet rs = stmt.executeQuery();
		
		// Loop through all the users and fill array
		while (rs.next()) {
			String username = rs.getString("username");
			String isAdmin = rs.getString("isadmin");
			String isCreator = rs.getString("iscreator");
			String joinDate = rs.getString("joindate");
			JSONObject userObject = new JSONObject();
			userObject.put("username", username);
			userObject.put("isAdmin", isAdmin.equals("true"));
			userObject.put("isCreator", isCreator.equals("true"));
			userObject.put("joinDate", joinDate);
			usersArray.put(userObject);
		}
		
		return usersArray;
	}
	
	/**
	 * 
	 * Add a new user to the database.
	 * 
	 * @param username
	 * @param password
	 * 
	 */
	public void addUser(String username, String password) throws SQLException {
		
		// Hash the password
		String passwordHash = DigestUtils.sha1Hex(ServerConfig.getInstance().passwordSalt + password).toString();

		// Write the user to database.
		PreparedStatement stmt = con.prepareStatement("INSERT INTO users (username, passwordhash, isadmin, iscreator, joindate) VALUES (?, ?, 'false', 'false', NOW())");
		stmt.setString(1, username);
		stmt.setString(2, passwordHash);
		stmt.executeUpdate();
		
	}
	
	/**
	 * 
	 * Delete a user.
	 * 
	 * @param username
	 * 
	 */
	public void deleteUser(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("DELETE FROM users WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Give a user admin privileges.
	 * 
	 * @param username
	 * 
	 */
	public void makeUserAdmin(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE users SET isadmin = 'true' WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Revoke a user's administrator privileges.
	 * 
	 * @param username
	 * 
	 */
	public void revokeUserAdmin(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE users SET isadmin = 'false' WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Give a user repository creation rights.
	 * 
	 * @param username
	 * 
	 */
	public void makeUserCreator(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE users SET iscreator = 'true' WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Revoke a user's rights to create repositories.
	 * 
	 * @param username
	 * 
	 */
	public void revokeUserCreator(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE users SET iscreator = 'false' WHERE username = ?");
		stmt.setString(1, username);
		stmt.executeUpdate();
	}
	
	/**
	 * 
	 * Modify the owner of a repository.
	 * 
	 * @param repositoryAlias
	 * @param username
	 * 
	 */
	public void modifyRepositoryOwner(String repositoryAlias, String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("UPDATE repositories SET repositoryowner = ? WHERE repositoryalias = ?");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Add a user to a repository.
	 * 
	 * @param username
	 * @param repositoryAlias
	 * 
	 */
	public void addUserToRepository(String username, String repositoryAlias) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("INSERT INTO useraccess (username, repositoryalias) VALUES (?, ?)");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		stmt.executeUpdate();
	}

	/**
	 * 
	 * Remove a user from a repository.
	 * 
	 * @param username
	 * @param repositoryAlias
	 * 
	 */
	public void deleteUserFromRepository(String username, String repositoryAlias) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("DELETE FROM useraccess WHERE username = ? AND repositoryalias = ?");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		stmt.executeUpdate();
	}
	
	/**
	 * 
	 * Check whether login credentials are correct. If they are, return the username (in correct case). Otherwise return null.
	 * 
	 * @param username
	 * @param password
	 * 
	 * @return username (success) or null (error)
	 * 
	 */
	public String getUsernameForCorrectLogin(String username, String password) throws SQLException {
		String passwordHash = DigestUtils.sha1Hex(ServerConfig.getInstance().passwordSalt + password).toString();

		PreparedStatement stmt = con.prepareStatement("SELECT username FROM users WHERE username = ? AND passwordhash = ?");		
		stmt.setString(1, username);
		stmt.setString(2, passwordHash);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			// User/pass correct
			return rs.getString("username");
		}
		else {
			// User/pass doesn't exist
			return null;
		}
	}
	
	/**
	 * 
	 * Create and persist new session ID for a user.
	 * 
	 * @param sessionId
	 * @param username
	 * 
	 */
	public String createAndPersistSessionIdForUser(String username) throws SQLException {
		String newSessionId = getRandomHexString(32);
		
		PreparedStatement stmt = con.prepareStatement("INSERT INTO usersessions (sessionid, username, expires) VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))");
		stmt.setString(1, newSessionId);
		stmt.setString(2, username);
		stmt.executeUpdate();
		
		return newSessionId;
	}
	
	/**
	 * 
	 * Checks whether a user has access to a repository.
	 * 
	 * @param username
	 * @param repositoryAlias
	 * 
	 */
	public boolean doesUserHaveRepositoryAccess(String username, String repositoryAlias) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("SELECT username FROM useraccess WHERE username = ? AND repositoryalias = ?");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		ResultSet rs = stmt.executeQuery();
		return rs.next();
	}

	/**
	 * 
	 * Does a user have administrator privileges?
	 * 
	 * @param username
	 * 
	 */
	public boolean isUserAdmin(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("SELECT username FROM users WHERE username = ? and isadmin = 'true'");
		stmt.setString(1, username);
		ResultSet rs = stmt.executeQuery();
		return rs.next();
	}

	/**
	 * 
	 * Does a user have repository creation rights?
	 * 
	 * @param username
	 * 
	 */
	public boolean isUserCreator(String username) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("SELECT username FROM users WHERE username = ? and iscreator = 'true'");
		stmt.setString(1, username);
		ResultSet rs = stmt.executeQuery();
		return rs.next();
	}

	/**
	 * 
	 * Is the user the owner of a repository?
	 * 
	 * @param username
	 * @param repositoryAlias
	 * 
	 */
	public boolean isUserRepositoryOwner(String username, String repositoryAlias) throws SQLException {
		if (username == null) return false;
		PreparedStatement stmt = con.prepareStatement("SELECT repositoryowner FROM repositories WHERE repositoryowner = ? AND repositoryalias = ?");
		stmt.setString(1, username);
		stmt.setString(2, repositoryAlias);
		ResultSet rs = stmt.executeQuery();
		return rs.next();
	}

	/**
	 * 
	 * Retrieve the username for a session ID
	 * 
	 * @param sessionId
	 * 
	 * @return username
	 * 
	 */
	public String getUsername(String sessionId) throws SQLException {
		PreparedStatement stmt = con.prepareStatement("SELECT username FROM usersessions WHERE sessionid = ? AND NOW() <= expires");
		stmt.setString(1, sessionId);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getString("username");
		}
		else {
			return null;
		}
	}

	/**
	 * 
	 * Returns the counter for the local clones of a repository.
	 * 
	 * @param repositoryAlias
	 * 
	 */
	public int getRepositoryCloneCount(String repositoryAlias) throws Exception {
		PreparedStatement stmt = con.prepareStatement("SELECT clonecount FROM repositories WHERE repositoryalias = ?");
		stmt.setString(1, repositoryAlias);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getInt("clonecount");
		}
		else {
			throw new Exception("No Clone Count found");
		}
	}

	/**
	 * 
	 * Increase the counter for the local clone of a repository.
	 * 
	 * @param repositoryAlias
	 * 
	 */
	public void incRepositoryCloneCount(String repositoryAlias) throws Exception {
		PreparedStatement stmt = con.prepareStatement("UPDATE repositories SET clonecount = clonecount + 1 WHERE repositoryalias = ?");
		stmt.setString(1, repositoryAlias);
		stmt.executeUpdate();
	}
	
	/**
	 * 
	 * Find the common ancestor commit for two commits with the shortest distance
	 * 
	 * @param repositoryAlias
	 * @param commit1
	 * @param commit2
	 * 
	 */
	public String getMergeBaseCommitId(String repositoryAlias, String commit1, String commit2) throws SQLException {

		PreparedStatement stmt = con.prepareStatement("SELECT b1.downstreamcommit, (b1.distance + b2.distance) AS totaldistance FROM commithistory AS b1 CROSS JOIN commithistory AS b2 WHERE b1.commit = ? AND b2.commit = ? AND b1.downstreamcommit = b2.downstreamcommit AND b1.repositoryalias = ? AND b2.repositoryalias = ? ORDER BY totaldistance ASC");

		stmt.setString(1, commit2);
		stmt.setString(2, commit1);
		stmt.setString(3, repositoryAlias);
		stmt.setString(4, repositoryAlias);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getString("downstreamcommit");
		}
		else {
			return null;
		}
		
	}
	
	/**
	 * 
	 * Retrieve the commit ID for a branch and file and user.
	 * 
	 * @param repositoryAlias
	 * @param username
	 * @param branch
	 * @param filename
	 * 
	 */
	public String getCommitForBranchAndFile(String repositoryAlias, String username, String branch, String filename) throws SQLException {

		PreparedStatement stmt = con.prepareStatement("SELECT commit FROM files WHERE repositoryalias = ? AND username = ? AND branch = ? AND filename = ? AND (committed = 'committed' OR committed = 'both')");

		stmt.setString(1, repositoryAlias);
		stmt.setString(2, username);
		stmt.setString(3, branch);
		stmt.setString(4, filename);

		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			return rs.getString("commit");
		}
		else {
			return null;
		}
		
	}
	
	
	/**
	 * 
	 * Generate random hex string.
	 * Used to create new session ID.
	 * 
	 * @param numchars length of the random string
	 * 
	 */
	private String getRandomHexString(int numchars){
        Random r = new Random();
        StringBuffer sb = new StringBuffer();
        while(sb.length() < numchars){
            sb.append(Integer.toHexString(r.nextInt()));
        }

        return sb.toString().substring(0, numchars);
    }
	
}
