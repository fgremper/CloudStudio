package ch.ethz.fgremper.rtca;

import java.io.File;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.json.JSONArray;
import org.json.JSONObject;

public class RepositoryReader {
	public RepositoryReader(String localPath) throws Exception {
		JSONArray fileArray = new JSONArray();
		
		System.out.println("[Repository] Reading: " + localPath);

		// open the repository in jgit
		FileRepositoryBuilder builder = new FileRepositoryBuilder();
		builder.setGitDir(new File(localPath + "/.git"));
		builder.setMustExist(true);
		builder.readEnvironment(); // scan environment GIT_* variables
		builder.findGitDir(); // scan up the file system tree
		Repository repository = builder.build();
		
		if (repository.getDirectory() == null) {
			throw new Exception("Not a git repository: " + localPath);
		}
        System.out.println("[Repository] Opened in jgit: " + repository.getDirectory());
        
        // get all references
        Collection<Ref> refs = repository.getAllRefs().values();
        
        for (Ref ref : refs) {
        	System.out.println("[Repository] Ref: " + ref.getName());
        	
        	// local branch?
        	if (ref.getName().startsWith("refs/heads/")) {
        		
        		Ref branch = repository.getRef(ref.getName());
        		RevWalk walk = new RevWalk(repository);
        		RevCommit commit = walk.parseCommit(branch.getObjectId());

	            RevTree tree = commit.getTree();
	            System.out.println("[Repository] Tree: " + tree);
	            
	            String commitId = commit.getName();
	            System.out.println("[Repository] Commit: " + commit.getName());
	            
	            // find downstream commits
	            
	            List<String> downstreamCommits = new LinkedList<String>();
	            List<RevCommit> todoCommits = new LinkedList<RevCommit>();
	            
	            if (commit.getParents() != null) todoCommits.addAll(Arrays.asList(commit.getParents()));
	            while (!todoCommits.isEmpty()) {
	            	RevCommit pop = todoCommits.remove(0);
	            	RevCommit currentCommit = walk.parseCommit(pop.getId());
	            	if (!downstreamCommits.contains(currentCommit.getName())) {
		            	downstreamCommits.add(currentCommit.getName());
			            if (currentCommit.getParents() != null) todoCommits.addAll(Arrays.asList(currentCommit.getParents()));
	            	}
	            }
	            
	            for (String u : downstreamCommits) {
	            	System.out.println("[Repository] Downstream commit: "  + u);
	            }
	            
	            // get file contents and append to json string
	            
	            TreeWalk treeWalk = new TreeWalk(repository);
	            treeWalk.addTree(tree);
	            treeWalk.setRecursive(true);
	            
	            while (treeWalk.next()) {
	            	// iterate through files in the latest commit of a branch
	            	System.out.println("[Repository] File: " + treeWalk.getPathString());

					JSONObject fileObject = new JSONObject();
					fileObject.put("filename", treeWalk.getPathString()); // TODO: send some sort of relative filename here
					
					// read the file content
	            	ObjectId objectId = treeWalk.getObjectId(0);
	            	ObjectLoader loader = repository.open(objectId);

	            	InputStream fileInputStream = loader.openStream();
            		
	            	String fileContent = IOUtils.toString(fileInputStream, "UTF-8");
	            	System.out.println(fileContent);

					fileObject.put("content", fileContent);
					fileObject.put("branch", ref.getName().substring("ref/heads/".length() + 1));
					fileObject.put("commit", commitId);
					fileObject.put("downstreamCommits", downstreamCommits);
					
					fileArray.put(fileObject);
	            }
	            
	            if (ref.getName().equals(repository.getFullBranch())) {
	            	System.out.println("THIS IS MY CURRENT BRANCH BTW!");
	            	// this is my currently checked out branch.
	            	// read the files from filesystem also!
	            }
        	}
            
        }
        
        String jsonOutputString = fileArray.toString();
		System.out.println("Created JSON string: " + jsonOutputString);

	}
}
