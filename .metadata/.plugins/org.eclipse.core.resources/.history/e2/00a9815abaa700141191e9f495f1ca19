package ch.ethz.fgremper.rtca;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.sql.SQLException;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.sun.net.httpserver.Headers;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

public class RequestHttpHandler implements HttpHandler {

	public void handle(HttpExchange exchange) throws IOException {
		
		// Get HTTP exchange information
		URI uri = exchange.getRequestURI();
		String requestMethod = exchange.getRequestMethod();
		System.out.println("[RequestHttpHandler] Incoming request: " + requestMethod + " " + uri.getPath());
		String inputJsonString = IOUtils.toString(exchange.getRequestBody(), "UTF-8");
		System.out.println("[RequestHttpHandler] JSON string: " + inputJsonString);
		
		// Variables
		String response = null;
		String prefix = "/pull";

		try {
			// Get database connection
			DatabaseConnection db = null;
			db = new DatabaseConnection();
			
			// POST request?
			if (requestMethod.equalsIgnoreCase("POST")) {
				
				// Login request
				if (uri.getPath().equals(prefix + "/login") || uri.getPath().equals(prefix + "/createUserAndLogin")) {
					System.out.println("[RequestHttpHandler] Incoming LOGIN.");
					
					// Read parameters
					JSONObject loginObject = new JSONObject(inputJsonString);
					String username = loginObject.getString("username");
					String password = loginObject.getString("password");
					
					// Do we need to create the user?
					if (uri.getPath().equals(prefix + "/createUserAndLogin")) {
						db.addUser(username, password);
					}
					
					// Request new session ID from database
					String sessionId = db.getNewSessionIdForCorrectLogin(username, password);
	
					// Initialize response object
					JSONObject responseObject = new JSONObject();
					
					if (sessionId != null) {
						// Persist session ID
						db.startTransaction();
						db.persistSessionIdForUser(sessionId, username);
						db.commitTransaction();
	
						// Create user object
						responseObject.put("isAdmin", db.isUserAdmin(sessionId));
						responseObject.put("isCreator", db.isUserCreator(sessionId));
						responseObject.put("sessionId", sessionId);
						responseObject.put("username", username);
					}
					
					response = responseObject.toString();
					
				}
			
				// Get repositories request
				if (uri.getPath().equals(prefix + "/getRepositories")) {
					System.out.println("[RequestHttpHandler] Incoming GET REPOSITORIES.");
					
					// Read parameters
					JSONObject getRepositoriesObject = new JSONObject(inputJsonString);
					String sessionId = getRepositoriesObject.getString("sessionId");
					
					// Read repository information from database
					db.startTransaction();
					response = db.getRepositories(sessionId).toString();
					db.commitTransaction();
					
				}
	
				// Get users request
				if (uri.getPath().equals(prefix + "/getUsers")) {
					System.out.println("[RequestHttpHandler] Incoming GET USERS.");
					
					// Read parameters
					JSONObject getRepositoriesObject = new JSONObject(inputJsonString);
					String sessionId = getRepositoriesObject.getString("sessionId");
					
					// We need to be admin to retrieve this information
					if (db.isUserAdmin(sessionId)) {
						response = db.getUsers().toString();
					}
				}
				
				// Get file conflicts requests
				if (uri.getPath().startsWith("/pull/getFileConflicts")) {
					System.out.println("Incoming GET FILE CONFLICTS.");
					
					response = db.getFileConflicts().toString();
				}
			
				// Add repository request
				if (requestMethod.equalsIgnoreCase("POST") && uri.getPath().equals(prefix + "/addRepository")) {
					System.out.println("Incoming ADD REPOSITORY.");
		
					JSONObject addRepositoryObject = new JSONObject(inputJsonString);
					String repositoryAlias = addRepositoryObject.getString("repositoryAlias");
					String repositoryUrl = addRepositoryObject.getString("repositoryUrl");
					String sessionId = addRepositoryObject.getString("sessionId");
	
					if (db.isUserAdmin(sessionId) || db.isUserCreator(sessionId)) {
						db = new DatabaseConnection();
						db.startTransaction();
						String repositoryOwner = db.getUsername(sessionId);
						db.addRepository(repositoryAlias, repositoryUrl, repositoryOwner);
						db.commitTransaction();
						response = "{}";
					}
				}

				// Delete repository request
				if (requestMethod.equalsIgnoreCase("POST") && uri.getPath().equals(prefix + "/deleteRepository")) {
					System.out.println("Incoming ADD REPOSITORY.");

					JSONObject deleteRepositoryObject = new JSONObject(inputJsonString);
					String repositoryAlias = deleteRepositoryObject.getString("repositoryAlias");
					String repositoryUrl = deleteRepositoryObject.getString("repositoryUrl");
					String sessionId = deleteRepositoryObject.getString("sessionId");
	
					if (db.isUserAdmin(sessionId) || db.isUserRepositoryOwner(sessionId, repositoryAlias)) {
						db = new DatabaseConnection();
						db.startTransaction();
						db.deleteRepository(repositoryAlias);
						db.commitTransaction();
						response = "{}";
					}
				}
			
			}
			
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		if (response != null) {
			exchange.sendResponseHeaders(200, response.length());
		}
		else {
			response = "401 (Bad Request)";
			exchange.sendResponseHeaders(401, response.length());
		}
		System.out.println("[RequestHttpHandler] Sending response: " + response);
		OutputStream os = exchange.getResponseBody();
		os.write(response.getBytes());
		os.close();
		
	}
}
