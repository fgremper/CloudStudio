package ch.ethz.fgremper.rtca;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.configuration.XMLConfiguration;
import org.apache.commons.io.IOUtils;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.internal.storage.file.FileRepository;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.eclipse.jgit.treewalk.filter.PathFilter;
import org.json.JSONArray;
import org.json.JSONObject;

public class LocalMain {

	static LinkedList<String> modifiedFilesList = new LinkedList<String>();
	static String jsonOutputString;

	static String serverUrl;
	static String username;
	static LinkedList<RepositoryInfo> repositoriesList = new LinkedList<RepositoryInfo>();

	public static void main(String[] args) throws Exception {

		

		try {

			/* READ CONFIG */
			
			XMLConfiguration config = new XMLConfiguration("config.xml");
	
			username = config.getString("username");
			if (username == null) throw new Exception("No username in config!");
			System.out.println("Config -- username: " + username);
			
			serverUrl = config.getString("serverUrl");
			if (serverUrl == null) throw new Exception("No serverUrl in config!");
			System.out.println("Config -- serverUrl: " + serverUrl);
			
			boolean atLeastOneRepository = false;
			for (int i = 0; ; i++) {
				String repositoryAlias = config.getString("repositories.repository(" + i + ").alias");
				String repositoryLocalPath = config.getString("repositories.repository(" + i + ").localPath");
				if (repositoryAlias == null) break;
				if (repositoryLocalPath == null) break;
				atLeastOneRepository = true;
				System.out.println("Config -- repository(" + i + "): \"" + repositoryAlias + "\" (" + repositoryLocalPath + ")");
				repositoriesList.add(new RepositoryInfo(repositoryAlias, repositoryLocalPath));
			}
			if (!atLeastOneRepository) throw new Exception("No repositories in config!");

		}
		catch (Exception e) {
			System.err.println("Error while reading config.");
			e.printStackTrace();
			return;
		}
		

		for (RepositoryInfo repositoryInfo : repositoriesList) {

			System.out.println("Active repository: \"" + repositoryInfo.alias + "\" (" + repositoryInfo.localPath + ")");

			FileRepositoryBuilder builder = new FileRepositoryBuilder();
			Repository repository = builder.setGitDir(new File(repositoryInfo.localPath + "/.git"))
				.setMustExist(true)
				.readEnvironment() // scan environment GIT_* variables
				.findGitDir() // scan up the file system tree
				.build();
			
			if (repository.getDirectory() == null) {
				// we haven't loaded a repository
				return;
			}
	        System.out.println("Having repository: " + repository.getDirectory());
	        
	        //ObjectId head = repository.resolve("HEAD");
	        //RevWalk revWalk = new RevWalk(repository);
	        
	        //RevCommit commit = revWalk.parseCommit(head);
	        
	        //System.out.println(commit);
	        
	        
	        Git git = new Git(repository);
	        
	        //List<Ref> branches = repository.getAllRefs().values();
	        
	        Map<String, Ref> allRefs = repository.getAllRefs();
	        Collection<Ref> values = allRefs.values();
	        for (Ref ref : values) {
	        	System.out.println("FOR REF: " + ref.getName());
	        	//epository.get
	        	
	
	            Ref head = repository.getRef(ref.getName());
	
	            // a RevWalk allows to walk over commits based on some filtering that is
	            // defined
	            RevWalk walk = new RevWalk(repository);
	
	            RevCommit commit = walk.parseCommit(head.getObjectId());
	            RevTree tree = commit.getTree();
	            System.out.println("Having tree: " + tree);
	
	            // now use a TreeWalk to iterate over all files in the Tree recursively
	            // you can set Filters to narrow down the results if needed
	            TreeWalk treeWalk = new TreeWalk(repository);
	            treeWalk.addTree(tree);
	            treeWalk.setRecursive(true);
	            while (treeWalk.next()) {
	            	System.out.println("found: " + treeWalk.getPathString());
	            	
	            	 ObjectId objectId = treeWalk.getObjectId(0);
	            	 ObjectLoader loader = repository.open(objectId);
	
	            	 // and then one can use either
	            	 InputStream in = loader.openStream();
	            			 
	            	//System.out.println("found: " + treeWalk.get);
	            	
	            	IOUtils.copy(in, System.out);
	            	System.out.println("");
	            	System.out.println("");
	
	                
	            }
	            
	        }
	        
	        
			/*for (Ref ref : branches) {
				System.out.println("branch: " + ref.getName());
			}*/
	        
	        System.out.println("My branch: " + repository.getFullBranch());
		}
        
	}

}
