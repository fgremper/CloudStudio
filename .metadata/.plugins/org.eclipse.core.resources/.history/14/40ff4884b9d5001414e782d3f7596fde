package ch.ethz.fgremper.test.combination;

import static org.junit.Assert.*;
import junit.framework.Assert;

import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Test;

import ch.ethz.fgremper.rtca.DatabaseConnection;
import ch.ethz.fgremper.rtca.test.helper.TestGitHelper;

public class BranchLevelAwarenessTest {


	public JSONObject findItem(JSONArray array, String key, String value) throws Exception {
		for (int i = 0; i < array.length(); i++) {
			if (array.getJSONObject(i).getString(key).equals(value)) return array.getJSONObject(i);
		}
		return null;
	}

	
	@Test
	public void test() throws Exception {
		
		DatabaseConnection db = new DatabaseConnection();
		db.getConnection();

		JSONObject responseObject;
		JSONArray branchesArray;
		JSONObject branchObject;
		
		// Setup default state
		TestGitHelper.setupTest();
		TestGitHelper.runPlugins();
		
		// Test default state
		responseObject = db.getBranchLevelAwareness("TestRepository");
		branchesArray = responseObject.getJSONArray("branches");
		assertEquals(1, branchesArray.length());
		branchObject = branchesArray.getJSONObject(0);

		assertEquals(3, branchObject.getJSONArray("activeUsers").length());
		assertEquals(3, branchObject.getJSONArray("users").length());
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "John").getString("relationWithOrigin"));
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "David").getString("relationWithOrigin"));
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "Isabelle").getString("relationWithOrigin"));
		
		// Setup John 1 ahead
		TestGitHelper.createOrModifyFile("John", "default.txt");
		TestGitHelper.commit("John");
		TestGitHelper.runPlugins();

		// Test John 1 ahead
		responseObject = db.getBranchLevelAwareness("TestRepository");
		branchesArray = responseObject.getJSONArray("branches");
		assertEquals(1, branchesArray.length());
		branchObject = branchesArray.getJSONObject(0);
		assertEquals("AHEAD", findItem(branchObject.getJSONArray("users"), "username", "John").getString("relationWithOrigin"));
		assertEquals(1, findItem(branchObject.getJSONArray("users"), "username", "John").getInt("distanceFromOrigin"));
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "David").getString("relationWithOrigin"));
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "Isabelle").getString("relationWithOrigin"));

		// Setup John 2 ahead
		TestGitHelper.createOrModifyFile("John", "default.txt");
		TestGitHelper.commit("John");
		TestGitHelper.runPlugins();

		// Test John 2 ahead
		responseObject = db.getBranchLevelAwareness("TestRepository");
		branchesArray = responseObject.getJSONArray("branches");
		assertEquals(1, branchesArray.length());
		branchObject = branchesArray.getJSONObject(0);
		assertEquals("AHEAD", findItem(branchObject.getJSONArray("users"), "username", "John").getString("relationWithOrigin"));
		assertEquals(2, findItem(branchObject.getJSONArray("users"), "username", "John").getInt("distanceFromOrigin"));
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "David").getString("relationWithOrigin"));
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "Isabelle").getString("relationWithOrigin"));
		
		// Setup David 1 ahead
		TestGitHelper.createOrModifyFile("John", "default.txt");
		TestGitHelper.commit("John");
		TestGitHelper.runPlugins();

		// Test David 1 ahead
		responseObject = db.getBranchLevelAwareness("TestRepository");
		branchesArray = responseObject.getJSONArray("branches");
		assertEquals(1, branchesArray.length());
		branchObject = branchesArray.getJSONObject(0);
		assertEquals("AHEAD", findItem(branchObject.getJSONArray("users"), "username", "John").getString("relationWithOrigin"));
		assertEquals(2, findItem(branchObject.getJSONArray("users"), "username", "John").getInt("distanceFromOrigin"));
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "David").getString("relationWithOrigin"));
		assertEquals(1, findItem(branchObject.getJSONArray("users"), "username", "David").getInt("distanceFromOrigin"));
		assertEquals("EQUAL", findItem(branchObject.getJSONArray("users"), "username", "Isabelle").getString("relationWithOrigin"));
		
		
		
				
	}

}
