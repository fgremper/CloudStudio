package ch.ethz.fgremper.rtca;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.json.JSONArray;
import org.json.JSONObject;

import JLibDiff.Diff3;
import JLibDiff.Hunk3;

import com.sun.net.httpserver.HttpServer;

import difflib.Delta;
import difflib.Delta.TYPE;
import difflib.DiffAlgorithm;
import difflib.DiffUtils;
import difflib.Patch;

public class ServerMain {

	static int port = 7330;

	public static void executeCommand(String consoleInput) throws Exception {
		System.out.println("[TestGitHelper] Executing: " + consoleInput);
		Process p = Runtime.getRuntime().exec(consoleInput);
		p.waitFor();

		BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

		String line;
		while ((line = reader.readLine()) != null) {
			System.out.println("[TestGitHelper] Console: " + line);
		}
	}

	public static List<String> fileToLines(String filename) {
        List<String> lines = new LinkedList<String>();
        String line = "";
        BufferedReader in = null;
        try {
                in = new BufferedReader(new InputStreamReader(
                        new FileInputStream(filename), "UTF8"));
                while ((line = in.readLine()) != null) {
                        lines.add(line);
                }
        } catch (IOException e) {
                e.printStackTrace();
        } finally {
                if (in != null) {
                        try {
                                in.close();
                        } catch (IOException e) {
                                // ignore ... any errors should already have been
                                // reported via an IOException from the final flush.
                        }
                }
        }
        return lines;
	}
	
	public static void main(String[] args) throws Exception {

		Vector<List<String>> fileContent = new Vector<List<String>>();
		fileContent.set(1, fileToLines("one.txt"));
		fileContent.set(2, fileToLines("two.txt"));
		fileContent.set(3, fileToLines("three.txt"));

		Vector<List<String>> fileType = new Vector<List<String>>();
	    for (int i = 1; i <= 3; i++) {
			fileContent.set(1, new LinkedList<String>());
	    	for (int j = 0; j < fileContent.get(i).size(); j++) {
	    		fileType.get(i).add("unchanged");
	    	}
	    }
	    
	    
	    int offset1 = 0;
	    int offset2 = 0;
	    int offset3 = 0;
	    
	    
		Process p = Runtime.getRuntime().exec("diff3 one.txt two.txt three.txt");
		p.waitFor();

		BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

		String line;
		
		Pattern pattern = Pattern.compile("([1-3]):([0-9]+)(,([0-9]+))?([ac])");

		Vector<Integer> fileStart = new Vector<Integer>();
		Vector<Integer> fileEnd = new Vector<Integer>();
		Vector<String> fileType = new Vector<String>();
		int maxLength = 0;
		
		while ((line = reader.readLine()) != null) {
			Matcher m = pattern.matcher(line);
			if (m.matches()) {
				int fileNum = Integer.parseInt(m.group(1));
				
				if (fileNum == 1) {
					maxLength = 0;
				}
				
				fileStart.set(fileNum, Integer.parseInt(m.group(2)));
				fileEnd.set(fileNum, m.group(4) != null ? Integer.parseInt(m.group(4)) : Integer.parseInt(m.group(2)));
				maxLength = Math.max(maxLength, (m.group(4) != null ? (Integer.parseInt(m.group(4)) - Integer.parseInt(m.group(2)) + 1) : 1));
				fileType.set(fileNum, m.group(5));
				

				if (fileNum == 3) {
					for (int i = 1; i <= 3; i++) {
						
					}
				}
				
				//System.out.println(m.groupCount());
				System.out.println("[TestGitHelper] Console: " + line);
				System.out.println("[TestGitHelper]  >> " + fileNum + " " + fileStart + " " + fileEnd + " " + fileType);
			}
		}

	    
	    /*for (String ha : file1Content) {
	    	System.out.println(ha);
	    }*/
	    
		/*
				// create admin if it doens't exist
		

        try {

    		DatabaseConnection db = new DatabaseConnection();
    		
    		db.startTransaction();
    		db.addUser("admin", "1234");
    		db.makeUserAdmin("admin");
    		db.commitTransaction();
    		
        }
        catch (Exception e) {
        	// nothing
        }
        */
		/*
		
		// Periodically origin updater
		System.out.println("[Main] Starting periodical origin updater");
		
		PeriodicalAllOriginUpdater originUpdaterInterval = new PeriodicalAllOriginUpdater();
		new Thread(originUpdaterInterval).start();

		*/
		
		// HTTP server
		/*
		int port = ServerConfig.getInstance().serverPort;
		
		System.out.println("[Main] Starting HTTP server on port " + port + "...");

		HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
		server.createContext("/webinterface", new WebInterfaceHttpHandler());
		server.createContext("/request", new RequestHttpHandler());
		server.setExecutor(Executors.newCachedThreadPool());
		server.start();

		System.out.println("[Main] Server up!");
		*/
	}

}
