package ch.ethz.fgremper.rtca;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.configuration.XMLConfiguration;
import org.apache.commons.io.IOUtils;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.internal.storage.file.FileRepository;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.eclipse.jgit.treewalk.filter.PathFilter;
import org.json.JSONArray;
import org.json.JSONObject;

public class LocalMain {

	static LinkedList<String> modifiedFilesList = new LinkedList<String>();
	static String jsonOutputString;

	static String serverUrl;
	static String username;
	static LinkedList<RepositoryInfo> repositories = new LinkedList<RepositoryInfo>();

	public static void main(String[] args) throws Exception {

		String localPath = "/Users/novocaine/Documents/masterthesis/testsandpit/john";

		FileRepositoryBuilder builder = new FileRepositoryBuilder();
		Repository repository = builder.setGitDir(new File(localPath + "/.git"))
			.setMustExist(true)
			.readEnvironment() // scan environment GIT_* variables
			.findGitDir() // scan up the file system tree
			.build();
		
		if (repository.getDirectory() == null) {
			// we haven't loaded a repository
			return;
		}
        System.out.println("Having repository: " + repository.getDirectory());
        
        ObjectId head = repository.resolve("HEAD");
        RevWalk revWalk = new RevWalk(repository);
        
        RevCommit commit = revWalk.parseCommit(head);
        
        System.out.println(commit);
        
        
        Git git = new Git(repository);
        
        List<Ref> branches = git.branchList().call();
		for (Ref ref : branches) {
			System.out.println("branch: " + ref.getName());
		}
        System.out.println("My branch: " + repository.getBranch());
        
	}

}
