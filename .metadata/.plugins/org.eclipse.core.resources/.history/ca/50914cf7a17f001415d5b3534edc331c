package ch.ethz.fgremper.rtca;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.configuration.XMLConfiguration;
import org.apache.commons.io.IOUtils;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.internal.storage.file.FileRepository;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.eclipse.jgit.treewalk.filter.PathFilter;
import org.json.JSONArray;
import org.json.JSONObject;

public class LocalMain {

	static LinkedList<String> modifiedFilesList = new LinkedList<String>();
	static String jsonOutputString;

	static String serverUrl;
	static String username;
	static LinkedList<RepositoryInfo> repositories = new LinkedList<RepositoryInfo>();

	public static void main(String[] args) throws Exception {

		String localPath = "/Users/novocaine/Documents/masterthesis/testrepos/repo1";
		
		/*
	    Repository localRepo;
	    Git git;
	    
        localRepo = new FileRepository(localPath + "/.git");
        git = new Git(localRepo);
        
        List<Ref> branches = git.branchList().call();
		for (Ref ref : branches) {
			System.out.println("branch: " + ref.getName());
		}
		
        // ObjectId head = localRepo.resolve(Constants.HEAD);
        
        Iterable<RevCommit> log = git.log().call();
        for (RevCommit revCommit : log) {
        	System.out.println(">> " + revCommit.toString());
        }
        */
		

		FileRepositoryBuilder builder = new FileRepositoryBuilder();
		Repository repository = builder.setGitDir(new File(localPath + "/.git"))
		  .setMustExist(true)
		  .readEnvironment() // scan environment GIT_* variables
		  .findGitDir() // scan up the file system tree
		  .build();
		

        System.out.println("Having repository: " + repository.getDirectory());
        
        ObjectId head = repository.resolve("HEAD");
        RevWalk revWalk = new RevWalk(repository);
        
        RevCommit commit = revWalk.parseCommit(head);
        
        System.out.println(commit);
        
		/*
		FileRepositoryBuilder repositoryBuilder = new FileRepositoryBuilder();
		repositoryBuilder.setMustExist(true);
		repositoryBuilder.setGitDir(new File(localPath + "/.git"));
		Repository gitRepository = repositoryBuilder.build();

        System.out.println("Having repository: " + gitRepository.getDirectory());
        
		Git git = new Git(gitRepository);

        Iterable<RevCommit> log = git.log().call();
        for (RevCommit revCommit : log) {
        	System.out.println(">> " + revCommit.toString());
        }
        */
		
		/*
        List<Ref> branches = git.branchList().call();
		for (Ref ref : branches) {
			System.out.println("branch: " + ref.getName());
		}
*/

        // the Ref holds an ObjectId for any type of object (tree, commit, blob, tree)
//        Ref head = gitRepository.getRef("master");
//        System.out.println("Ref of refs/heads/master: " + head);
	}

}
