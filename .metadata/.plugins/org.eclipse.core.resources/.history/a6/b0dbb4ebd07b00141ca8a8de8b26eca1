package ch.ethz.fgremper.rtca;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.InputStreamReader;

import org.apache.commons.io.FileUtils;

public class TestMain {

	static String sandpitDir = "../testsandpit/";
	static String testcaseDir = "testcases";
	
	public static void main(String[] args) throws Exception {
		readAllFilesFromTestcaseDirectory();
		/*
		createUser("origin");
		gitInit("origin");
		createOrModifyFile("origin", "somefile.txt");
		//deleteFile("origin", "somefile.txt");
		commit("origin");
		createUser("john");
		pull("john");
		*/
	}
	
	public static void readAllFilesFromTestcaseDirectory() throws Exception {
		File folder = new File("testcases");
		File[] listOfFiles = folder.listFiles();

		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile()) {
				System.out.println("Executing testcase: " + listOfFiles[i].getName());
				executeTestcase(listOfFiles[i]);
			}
		}
	}
	
	public static void executeTestcase(File file) throws Exception {
		BufferedReader br = new BufferedReader(new FileReader(file));
		String line;
		while ((line = br.readLine()) != null) {
			System.out.println("Line: " + line);
		}
		br.close();
	}
	
	public static void clearSandpit() {
		
	}
	
	public static void createUser(String user) throws Exception {
		System.out.println("Creating user directory: " + user);
		File userDir = new File(sandpitDir + user);
		userDir.mkdir();
	}
	
	public static void gitInit(String user) throws Exception {
		System.out.println("Running git init for user " + user);
		executeCommand("git --git-dir=" + sandpitDir + user + "/.git" + " --work-tree=" + sandpitDir + user + " init");
	}
	
	public static void createOrModifyFile(String user, String filename) throws Exception {
		String content = randomString();
		System.out.println("Creating file for user '" + user + "': " + filename);
		FileUtils.writeStringToFile(new File(sandpitDir + user + "/" + filename), content);
		executeCommand("git --git-dir=" + sandpitDir + user + "/.git" + " --work-tree=" + sandpitDir + user + " add " + filename);
	}

	public static void deleteFile(String user, String filename) throws Exception {
		System.out.println("Deleting file for user '" + user + "': " + filename);
		executeCommand("git --git-dir=" + sandpitDir + user + "/.git" + " --work-tree=" + sandpitDir + user + " rm -f " + filename);
	}

	public static void commit(String user) throws Exception {
		System.out.println("Committing user " + user);
		executeCommand("git --git-dir=" + sandpitDir + user + "/.git" + " --work-tree=" + sandpitDir + user + " commit -a -m commitmsg");
	}

	public static void pull(String user) throws Exception {
		System.out.println("Pulling as user " + user);
		executeCommand("git --git-dir=" + sandpitDir + user + "/.git" + " --work-tree=" + sandpitDir + user + " pull ../origin .");
	}
	
	public static void push(String user) throws Exception {
		System.out.println("Pulling as user " + user);
		executeCommand("git --git-dir=" + sandpitDir + user + "/.git" + " --work-tree=" + sandpitDir + user + " push -all origin");
	}
	
	public static String randomString() {
		return "this is not yet a random string.";
	}

	public static void executeCommand(String consoleInput) throws Exception {
		Process p = Runtime.getRuntime().exec(consoleInput);
		p.waitFor();

		BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

		String line;
		while ((line = reader.readLine()) != null) {
			System.out.println("Console: " + line);
		}
	}
}

