package ch.ethz.fgremper.test.combination;

import static org.junit.Assert.*;

import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Test;

import ch.ethz.fgremper.rtca.ContentConflictGitReader;
import ch.ethz.fgremper.rtca.DatabaseConnection;
import ch.ethz.fgremper.rtca.test.helper.TestGitHelper;

public class ContentLevelConflictTest {

	public JSONObject findItem(JSONArray array, String key, String value) throws Exception {
		for (int i = 0; i < array.length(); i++) {
			if (array.getJSONObject(i).getString(key).equals(value)) return array.getJSONObject(i);
		}
		return null;
	}

	
	@Test
	public void testTakingTheRightFiles()  throws Exception {


		// Database connection
		DatabaseConnection db = new DatabaseConnection();
		db.getConnection();

		// Objects
		ContentConflictGitReader gitReader;
		JSONArray diffLineArray;
		
		// Setup default state
		TestGitHelper.setupTest();
		TestGitHelper.runPlugins();

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", true);
		
        assertEquals((Integer) 0, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("theirContent"));
        
        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", false);
		
        assertEquals((Integer) 0, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("theirContent"));
        
        
        
        
        
        
        
        
        TestGitHelper.writeContentToFile("John", "default.txt", "john content");
        TestGitHelper.runPlugins();

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", true);
		
        assertEquals((Integer) 0, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("john content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("theirContent"));

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", false);
		
        assertEquals((Integer) 0, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("theirContent"));
        
        
        
        

        TestGitHelper.commit("John");
        TestGitHelper.runPlugins();

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", true);
		
        assertEquals((Integer) 0, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("john content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("theirContent"));

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", false);
		
        assertEquals((Integer) 0, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("john content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("theirContent"));
        
        
        
        
        

        
        
        
        TestGitHelper.writeContentToFile("David", "default.txt", "david content");
        TestGitHelper.runPlugins();

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", true);
		
        assertEquals((Integer) 1, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("john content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("david content", diffLineArray.getJSONObject(0).getString("theirContent"));

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", false);
		
        assertEquals((Integer) 1, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("john content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("theirContent"));
        
        
        
        

        TestGitHelper.commit("David");
        TestGitHelper.runPlugins();

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", true);
		
        assertEquals((Integer) 0, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("john content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("david content", diffLineArray.getJSONObject(0).getString("theirContent"));

        gitReader = new ContentConflictGitReader("TestRepository", "master", "default.txt", "John", "master", "David", false);
		
        assertEquals((Integer) 0, gitReader.countConflicts());
        diffLineArray = gitReader.diff();
        assertEquals(1, diffLineArray.length());
        assertEquals("john content", diffLineArray.getJSONObject(0).getString("myContent"));
        assertEquals("default content", diffLineArray.getJSONObject(0).getString("baseContent"));
        assertEquals("david content", diffLineArray.getJSONObject(0).getString("theirContent"));
        
        
        
        
        
		db.closeConnection();

	}

}
