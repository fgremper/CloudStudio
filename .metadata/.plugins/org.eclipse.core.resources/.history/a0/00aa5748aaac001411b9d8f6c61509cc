package ch.ethz.fgremper.rtca;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.sql.SQLException;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.FileUtils;
import org.json.JSONArray;
import org.json.JSONObject;

public class OriginUpdater implements Runnable {
	private String repositoryAlias;
	private String repositoryUrl;
	
	public OriginUpdater(String repositoryAlias, String repositoryUrl) {
		this.repositoryAlias = repositoryAlias;
		this.repositoryUrl = repositoryUrl;
	}
	
	public void run() {
		DatabaseConnection db;
		try {
			String originStorageDirectory = ServerConfig.getInstance().originStorageDirectory;
			
			System.out.println("[OriginUpdater] Cloning repository \"" + repositoryAlias + "\": " + repositoryUrl);

			// Create directory to clone repository in
			File userDir = new File("origins/" + repositoryAlias);
			userDir.mkdir();
			FileUtils.cleanDirectory(userDir); 
			
			// Clone repository
			executeCommand("git clone " + repositoryUrl + " " + originStorageDirectory + "/" + repositoryAlias);
			
			System.out.println("[OriginUpdater] Reading repository \"" + repositoryAlias + "\"");
			// Read repository information like we would normally
			RepositoryReader repositoryReader = new RepositoryReader(originStorageDirectory + "/" + repositoryAlias);
			JSONObject updateObject = repositoryReader.getUpdateObject();
			updateObject.put("username", "origin");
			updateObject.put("repositoryAlias", repositoryAlias);
			String inputJsonString = updateObject.toString();
			System.out.println("[OriginUpdater] JSON string: " + inputJsonString);
			
			// Inserting into database
			System.out.println("[OriginUpdater] Doing database stuff");
			db = new DatabaseConnection();
			db.startTransaction();
			
			// Create database user if it doesn't exist
			// TODO: probably don't do this here but in the db init
			try {
				db.addUser("origin", "...");
			}
			catch (Exception e) {
				
			}
			try {
				db.addUserToRepository("origin", repositoryAlias);
			}
			catch (Exception e) {
				
			}

			JSONObject setLocalGitStateObject = new JSONObject(inputJsonString);
			JSONArray fileArray = setLocalGitStateObject.getJSONArray("files");
			JSONArray commitHistory = setLocalGitStateObject.getJSONArray("commitHistory");
			String repositoryAlias = setLocalGitStateObject.getString("repositoryAlias");
		
			String username = "origin";
		
			// Start transaction
			db.startTransaction();
			
			// We're replacing all we know about what we know about this users git state, so delete every thing first
			db.deleteAllFilesFromRepositoryAndUser(repositoryAlias, username);

			// Read information in and store files to database and filesystem
			for (int i = 0; i < fileArray.length(); i++) {
				JSONObject fileObject = fileArray.getJSONObject(i);

				String filename = fileObject.getString("filename");
				String content = fileObject.getString("content");
				String sha = DigestUtils.sha1Hex(content).toString();
				String branch = fileObject.getString("branch");
				String commit = fileObject.getString("commit");
				String committed = fileObject.getString("committed");
				
				System.out.println("[RequestHttpHandler] File: " + filename + " (sha: " + sha + ")");

				FileUtils.writeStringToFile(new File("filestorage/" + sha), content);

				db.storeFile(repositoryAlias, username, filename, sha, branch, commit, committed);
			}

			// Read in commit history and store it to database
			for (int i = 0; i < commitHistory.length(); i++) {
				JSONObject commitObject = commitHistory.getJSONObject(i);

				String commit = commitObject.getString("commit");
				JSONArray downstreamCommits = commitObject.getJSONArray("downstreamCommits");
				
				System.out.println("[UpdateHttpHandler] Commit: " + commit);
				
				db.storeCommitHistory(repositoryAlias, username, commit, downstreamCommits);
			}
			
			// Commit
			db.commitTransaction();

			
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		

		// Close database connection
		try {
			if (db != null) {
				db.closeConnection();
			}
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void executeCommand(String consoleInput) throws Exception {
		System.out.println("[OriginUpdater] Executing: " + consoleInput);
		Process p = Runtime.getRuntime().exec(consoleInput);
		p.waitFor();

		BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

		String line;
		while ((line = reader.readLine()) != null) {
			System.out.println("[OriginUpdater] Console: " + line);
		}
	}
}
