package ch.ethz.fgremper.rtca;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.Executors;

import org.json.JSONArray;
import org.json.JSONObject;

import jlibdiff.Diff;
import jlibdiff.Diff3;
import jlibdiff.Hunk;
import jlibdiff.Hunk3;

import com.sun.net.httpserver.HttpServer;

import difflib.Delta;
import difflib.Delta.TYPE;
import difflib.DiffAlgorithm;
import difflib.DiffUtils;
import difflib.Patch;

public class ServerMain {

	static int port = 7330;
	
	public static List<String> fileToLines(String filename) {
        List<String> lines = new LinkedList<String>();
        String line = "";
        BufferedReader in = null;
        try {
                in = new BufferedReader(new FileReader(filename));
                while ((line = in.readLine()) != null) {
                        lines.add(line);
                }
        } catch (IOException e) {
                e.printStackTrace();
        } finally {
                if (in != null) {
                        try {
                                in.close();
                        } catch (IOException e) {
                                // ignore ... any errors should already have been
                                // reported via an IOException from the final flush.
                        }
                }
        }
        return lines;
}
	public static void main(String[] args) throws Exception {
		

        List<String> original = fileToLines("one.txt");
        List<String> revised  = fileToLines("two.txt");

        // Compute diff. Get the Patch object. Patch is the container for computed deltas.
        Patch patch = DiffUtils.diff(original, revised);
        
        /*for (String line: DiffUtils.generateUnifiedDiff(null, null, original, patch, 100)) {
            System.out.println(line);
        }*/
        
        /*
        JSONArray lineArray = new JSONArray();
        for (String line : original) {
        	JSONObject lineObject = new JSONObject();
        	lineArray.
        }
*/
        
        
        
        List<String> myContent = new LinkedList<String>(original);
        List<String> theirContent = new LinkedList<String>(original);
        List<String> myType = new LinkedList<String>();
        List<String> theirType = new LinkedList<String>();
        
        for (int i = 0; i < myContent.size(); i++) {
        	myType.add("unchanged");
        	theirType.add("unchanged");
        }
        
        int offset = 0;
        for (Delta delta : patch.getDeltas()) {
        	if (delta.getType() == TYPE.CHANGE) {
        		int pos = delta.getRevised().getPosition() + offset;
        		for (String line : (List<String>) delta.getRevised().getLines()) {
        			theirContent.set(pos, line);
        			theirType.set(pos, "modified");
        			pos++;
        		}
        		pos = delta.getOriginal().getPosition() + offset;
        		for (String line : (List<String>) delta.getOriginal().getLines()) {
        			myType.set(pos, "modified");
        			pos++;
        		}
        	}
        	if (delta.getType() == TYPE.DELETE) {
        		int pos = delta.getOriginal().getPosition() + offset;
        		for (String line : (List<String>) delta.getOriginal().getLines()) {
        			//their.(pos, "+" + line);
        			myContent.set(pos, line);
        			myType.set(pos, "add");
        			theirContent.set(pos, "");
        			theirType.set(pos, "pad");
        			pos++;
        		}
        	}
        	if (delta.getType() == TYPE.INSERT) {
        		int pos = delta.getOriginal().getPosition() + offset;
        		for (String line : (List<String>) delta.getRevised().getLines()) {
	    			theirContent.add(pos, line);
	    			theirType.add(pos, "add");
	    			myContent.add(pos, "");
	    			myType.add(pos, "pad");
	    			pos++;
	    			offset++;
	    		}
	    	}
        	
        	//)
        	System.out.println(delta.toString());
        	//System.out.println(delta.toString());
        	System.out.println(delta.getType());
        	//System.out.println(delta.g)
        	
        	
        }
        
        System.out.println("mine:");
        
        for (String l : myContent) {
        	System.out.println("> " + l);
        }

        System.out.println("theirs:");
        
        for (String l : theirContent) {
        	System.out.println("> " + l);
        }
        
		/*
		// Periodically origin updater
		System.out.println("[Main] Starting periodical origin updater");
		
		PeriodicalAllOriginUpdater originUpdaterInterval = new PeriodicalAllOriginUpdater();
		new Thread(originUpdaterInterval).start();
		
		*/
		
		// HTTP server
		/*
		int port = ServerConfig.getInstance().serverPort;
		
		System.out.println("[Main] Starting HTTP server on port " + port + "...");

		HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);
		server.createContext("/webinterface", new WebInterfaceHttpHandler());
		server.createContext("/request", new RequestHttpHandler());
		server.setExecutor(Executors.newCachedThreadPool());
		server.start();

		System.out.println("[Main] Server up!");
		*/
	}

}
